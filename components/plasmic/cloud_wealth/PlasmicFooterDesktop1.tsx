// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7iST1GVY7MEDdpjnrPuCNJ
// Component: B3-gyon6yF
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantshT8MqvJo0QuvrA } from "./PlasmicGlobalVariant__Desktop"; // plasmic-import: hT8MQVJo0quvrA/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cloud_wealth.module.css"; // plasmic-import: 7iST1GVY7MEDdpjnrPuCNJ/projectcss
import sty from "./PlasmicFooterDesktop1.module.css"; // plasmic-import: B3-gyon6yF/css

import Group9Icon from "./icons/PlasmicIcon__Group9"; // plasmic-import: O_IQvBk0Ex/icon

export type PlasmicFooterDesktop1__VariantMembers = {};
export type PlasmicFooterDesktop1__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooterDesktop1__VariantsArgs;
export const PlasmicFooterDesktop1__VariantProps = new Array<VariantPropType>();

export type PlasmicFooterDesktop1__ArgsType = {};
type ArgPropType = keyof PlasmicFooterDesktop1__ArgsType;
export const PlasmicFooterDesktop1__ArgProps = new Array<ArgPropType>();

export type PlasmicFooterDesktop1__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultFooterDesktop1Props {
  className?: string;
}

function PlasmicFooterDesktop1__RenderFunc(props: {
  variants: PlasmicFooterDesktop1__VariantsArgs;
  args: PlasmicFooterDesktop1__ArgsType;
  overrides: PlasmicFooterDesktop1__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    desktop: useScreenVariantshT8MqvJo0QuvrA()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Group9Icon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(projectcss.all, sty.svg)}
        role={"img"}
      />

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__k5Lxz
        )}
      >
        {"Home\n\nAbout\n\nCalculators\n\nFeatures\n\nPartners"}
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___3VE1F
        )}
      >
        {
          "Estate Planning\n\nFinancial Planning\n\nFiduciary Services\n\nProducts\n\nResources"
        }
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__otkgG
        )}
      >
        {
          "Our Technology\n\nDocumentation\n\nPresentations\n\nTutorials\n\nVersion History"
        }
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooterDesktop1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooterDesktop1__VariantsArgs;
    args?: PlasmicFooterDesktop1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooterDesktop1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFooterDesktop1__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooterDesktop1__ArgProps,
          internalVariantPropNames: PlasmicFooterDesktop1__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooterDesktop1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooterDesktop1";
  } else {
    func.displayName = `PlasmicFooterDesktop1.${nodeName}`;
  }
  return func;
}

export const PlasmicFooterDesktop1 = Object.assign(
  // Top-level PlasmicFooterDesktop1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicFooterDesktop1
    internalVariantProps: PlasmicFooterDesktop1__VariantProps,
    internalArgProps: PlasmicFooterDesktop1__ArgProps
  }
);

export default PlasmicFooterDesktop1;
/* prettier-ignore-end */
