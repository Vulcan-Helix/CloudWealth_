// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7iST1GVY7MEDdpjnrPuCNJ
// Component: IRFRdTpg57g_S
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 9KxG1LQhTfZ-fr/component
import TextInput from "../../TextInput"; // plasmic-import: IieLbHG0mDkikF/component
import Button from "../../Button"; // plasmic-import: hpLAsCB6dkK5a/component
import FooterDesktop from "../../FooterDesktop"; // plasmic-import: 0g0VB3cSY0U/component
import CtaBlock from "../../CtaBlock"; // plasmic-import: JgQ-Rg7b-gm-q/component

import { useScreenVariants as useScreenVariantshT8MqvJo0QuvrA } from "./PlasmicGlobalVariant__Desktop"; // plasmic-import: hT8MQVJo0quvrA/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cloud_wealth.module.css"; // plasmic-import: 7iST1GVY7MEDdpjnrPuCNJ/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: IRFRdTpg57g_S/css

import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: g-dNP8aX8yQkVc/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: LSNuBBNZXUjC6e/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  hero?: p.Flex<"div">;
  heroText1?: p.Flex<"div">;
  form?: p.Flex<"form">;
  requestADemoInput?: p.Flex<typeof TextInput>;
  svg?: p.Flex<"svg">;
  requestADemoButton?: p.Flex<typeof Button>;
  button?: p.Flex<typeof Button>;
  cwDashboardMockup1?: p.Flex<"div">;
  asFeaturedIn?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  footerDesktop?: p.Flex<typeof FooterDesktop>;
  ctaBlock?: p.Flex<typeof CtaBlock>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    desktop: useScreenVariantshT8MqvJo0QuvrA()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"root"}
            data-plasmic-override={overrides.root}
            data-plasmic-root={true}
            data-plasmic-for-node={forNode}
            hasGap={true}
            className={classNames(
              projectcss.all,
              projectcss.root_reset,
              projectcss.plasmic_default_styles,
              projectcss.plasmic_mixins,
              projectcss.plasmic_tokens,
              sty.root
            )}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <div
              data-plasmic-name={"hero"}
              data-plasmic-override={overrides.hero}
              className={classNames(projectcss.all, sty.hero)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__oNoGq)}>
                <div
                  data-plasmic-name={"heroText1"}
                  data-plasmic-override={overrides.heroText1}
                  className={classNames(projectcss.all, sty.heroText1)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__wxNmy
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#0F5CBF" }}
                      >
                        {"The"}
                      </span>
                      <React.Fragment>
                        {" Virtual Family Office "}
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#0F5CBF" }}
                      >
                        {"has arrived"}
                      </span>
                    </React.Fragment>
                  </h1>
                </div>

                <div
                  className={classNames(projectcss.all, sty.freeBox___6NXMg)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dxjZp)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eWPiz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__lhZdF
                          )}
                        >
                          {
                            "Instant, secure access to all of your financial and fiduciary information in a single, unified view, a real-time virtual round-table for all your advisors."
                          }
                        </div>

                        {true ? (
                          <form
                            data-plasmic-name={"form"}
                            data-plasmic-override={overrides.form}
                            className={classNames(projectcss.all, sty.form)}
                          >
                            <TextInput
                              data-plasmic-name={"requestADemoInput"}
                              data-plasmic-override={
                                overrides.requestADemoInput
                              }
                              className={classNames(
                                "__wab_instance",
                                sty.requestADemoInput
                              )}
                              placeholder={"" as const}
                              startIcon={
                                <React.Fragment>
                                  <SearchsvgIcon
                                    data-plasmic-name={"svg"}
                                    data-plasmic-override={overrides.svg}
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg
                                    )}
                                    role={"img"}
                                  />

                                  <Button
                                    data-plasmic-name={"requestADemoButton"}
                                    data-plasmic-override={
                                      overrides.requestADemoButton
                                    }
                                    className={classNames(
                                      "__wab_instance",
                                      sty.requestADemoButton
                                    )}
                                    color={"blue" as const}
                                    link={`/signup`}
                                  >
                                    <div
                                      className={classNames(
                                        projectcss.all,
                                        projectcss.__wab_text,
                                        sty.text__abt2Z
                                      )}
                                    >
                                      {"Request A Demo"}
                                    </div>
                                  </Button>
                                </React.Fragment>
                              }
                            />

                            <Button
                              data-plasmic-name={"button"}
                              data-plasmic-override={overrides.button}
                              className={classNames(
                                "__wab_instance",
                                sty.button
                              )}
                              color={"blue" as const}
                            >
                              {"Join the Waitlist"}
                            </Button>
                          </form>
                        ) : null}
                      </div>
                    ) : null}
                  </div>

                  {(
                    hasVariant(globalVariants, "desktop", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yc4Vx)}
                    >
                      <div
                        data-plasmic-name={"cwDashboardMockup1"}
                        data-plasmic-override={overrides.cwDashboardMockup1}
                        className={classNames(
                          projectcss.all,
                          sty.cwDashboardMockup1
                        )}
                      />
                    </div>
                  ) : null}
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"asFeaturedIn"}
              data-plasmic-override={overrides.asFeaturedIn}
              className={classNames(projectcss.all, sty.asFeaturedIn)}
            >
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__bYrme
                )}
              >
                {"As featured in"}
              </h1>

              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={
                  hasVariant(globalVariants, "desktop", "mobileOnly")
                    ? ("88px" as const)
                    : ("auto" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "desktop", "mobileOnly")
                    ? ("256px" as const)
                    : ("auto" as const)
                }
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/cloud_wealth/images/frame5Png.png",
                  fullWidth: 1263,
                  fullHeight: 138,
                  aspectRatio: undefined
                }}
              />
            </div>

            <FooterDesktop
              data-plasmic-name={"footerDesktop"}
              data-plasmic-override={overrides.footerDesktop}
              className={classNames("__wab_instance", sty.footerDesktop)}
            />

            {true ? (
              <CtaBlock
                data-plasmic-name={"ctaBlock"}
                data-plasmic-override={overrides.ctaBlock}
                className={classNames("__wab_instance", sty.ctaBlock)}
              />
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "hero",
    "heroText1",
    "form",
    "requestADemoInput",
    "svg",
    "requestADemoButton",
    "button",
    "cwDashboardMockup1",
    "asFeaturedIn",
    "img",
    "footerDesktop",
    "ctaBlock"
  ],
  header: ["header"],
  hero: [
    "hero",
    "heroText1",
    "form",
    "requestADemoInput",
    "svg",
    "requestADemoButton",
    "button",
    "cwDashboardMockup1"
  ],
  heroText1: ["heroText1"],
  form: ["form", "requestADemoInput", "svg", "requestADemoButton", "button"],
  requestADemoInput: ["requestADemoInput", "svg", "requestADemoButton"],
  svg: ["svg"],
  requestADemoButton: ["requestADemoButton"],
  button: ["button"],
  cwDashboardMockup1: ["cwDashboardMockup1"],
  asFeaturedIn: ["asFeaturedIn", "img"],
  img: ["img"],
  footerDesktop: ["footerDesktop"],
  ctaBlock: ["ctaBlock"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  hero: "div";
  heroText1: "div";
  form: "form";
  requestADemoInput: typeof TextInput;
  svg: "svg";
  requestADemoButton: typeof Button;
  button: typeof Button;
  cwDashboardMockup1: "div";
  asFeaturedIn: "div";
  img: typeof p.PlasmicImg;
  footerDesktop: typeof FooterDesktop;
  ctaBlock: typeof CtaBlock;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    hero: makeNodeComponent("hero"),
    heroText1: makeNodeComponent("heroText1"),
    form: makeNodeComponent("form"),
    requestADemoInput: makeNodeComponent("requestADemoInput"),
    svg: makeNodeComponent("svg"),
    requestADemoButton: makeNodeComponent("requestADemoButton"),
    button: makeNodeComponent("button"),
    cwDashboardMockup1: makeNodeComponent("cwDashboardMockup1"),
    asFeaturedIn: makeNodeComponent("asFeaturedIn"),
    img: makeNodeComponent("img"),
    footerDesktop: makeNodeComponent("footerDesktop"),
    ctaBlock: makeNodeComponent("ctaBlock"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
