// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7iST1GVY7MEDdpjnrPuCNJ
// Component: wco-GCH2Qp
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cloud_wealth.module.css"; // plasmic-import: 7iST1GVY7MEDdpjnrPuCNJ/projectcss
import sty from "./PlasmicCwFooter.module.css"; // plasmic-import: wco-GCH2Qp/css

import Group9Icon from "./icons/PlasmicIcon__Group9"; // plasmic-import: O_IQvBk0Ex/icon
import Line5Icon from "./icons/PlasmicIcon__Line5"; // plasmic-import: Ig28sg-IsK/icon
import Image5TracedIcon from "./icons/PlasmicIcon__Image5Traced"; // plasmic-import: is6zIJv7P1/icon

export type PlasmicCwFooter__VariantMembers = {};
export type PlasmicCwFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicCwFooter__VariantsArgs;
export const PlasmicCwFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicCwFooter__ArgsType = {};
type ArgPropType = keyof PlasmicCwFooter__ArgsType;
export const PlasmicCwFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicCwFooter__OverridesType = {
  root?: p.Flex<"div">;
  rectangle21?: p.Flex<"div">;
  cwLogoSolidWhite1?: p.Flex<"div">;
  b?: p.Flex<"div">;
  c?: p.Flex<"div">;
  globallyIncubateStandardsCompliantChannelsBeforeScalableBenefitsQuicklyDisseminateSuperiorDeliverablesWhereasWebEnabledApplicationsQuicklyDriveClicksAndMortarCatalystsForChangeBeforeVerticalArchitecturesCrediblyReintermediateBackendIdeasForCrossPlatformModelsContinuallyReintermediateIntegratedProcessesThroughTechnicallySoundIntellectualCapital?: p.Flex<"div">;
};

export interface DefaultCwFooterProps {
  className?: string;
}

function PlasmicCwFooter__RenderFunc(props: {
  variants: PlasmicCwFooter__VariantsArgs;
  args: PlasmicCwFooter__ArgsType;
  overrides: PlasmicCwFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"rectangle21"}
        data-plasmic-override={overrides.rectangle21}
        className={classNames(projectcss.all, sty.rectangle21)}
      />

      <div
        data-plasmic-name={"cwLogoSolidWhite1"}
        data-plasmic-override={overrides.cwLogoSolidWhite1}
        className={classNames(projectcss.all, sty.cwLogoSolidWhite1)}
      >
        <div
          data-plasmic-name={"b"}
          data-plasmic-override={overrides.b}
          className={classNames(projectcss.all, sty.b)}
        >
          <div
            data-plasmic-name={"c"}
            data-plasmic-override={overrides.c}
            className={classNames(projectcss.all, sty.c)}
          >
            <Group9Icon
              className={classNames(projectcss.all, sty.svg__csrKf)}
              role={"img"}
            />
          </div>
        </div>
      </div>

      <Line5Icon
        className={classNames(projectcss.all, sty.svg__qmcFl)}
        role={"img"}
      />

      <div
        data-plasmic-name={
          "globallyIncubateStandardsCompliantChannelsBeforeScalableBenefitsQuicklyDisseminateSuperiorDeliverablesWhereasWebEnabledApplicationsQuicklyDriveClicksAndMortarCatalystsForChangeBeforeVerticalArchitecturesCrediblyReintermediateBackendIdeasForCrossPlatformModelsContinuallyReintermediateIntegratedProcessesThroughTechnicallySoundIntellectualCapital"
        }
        data-plasmic-override={
          overrides.globallyIncubateStandardsCompliantChannelsBeforeScalableBenefitsQuicklyDisseminateSuperiorDeliverablesWhereasWebEnabledApplicationsQuicklyDriveClicksAndMortarCatalystsForChangeBeforeVerticalArchitecturesCrediblyReintermediateBackendIdeasForCrossPlatformModelsContinuallyReintermediateIntegratedProcessesThroughTechnicallySoundIntellectualCapital
        }
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.globallyIncubateStandardsCompliantChannelsBeforeScalableBenefitsQuicklyDisseminateSuperiorDeliverablesWhereasWebEnabledApplicationsQuicklyDriveClicksAndMortarCatalystsForChangeBeforeVerticalArchitecturesCrediblyReintermediateBackendIdeasForCrossPlatformModelsContinuallyReintermediateIntegratedProcessesThroughTechnicallySoundIntellectualCapital
        )}
      >
        {
          "Globally incubate standards compliant channels before scalable benefits. Quickly disseminate superior deliverables whereas web-enabled applications. Quickly drive clicks-and-mortar catalysts for change before vertical architectures. Credibly reintermediate backend ideas for cross-platform models. Continually reintermediate integrated processes through technically sound intellectual capital. "
        }
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__a9Uzz
        )}
      >
        {
          "Privacy Policy            Terms & Conditions            Cookie Policy"
        }
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__p5ZUe
        )}
      >
        {"Home\n\nAbout\n\nCalculators\n\nFeatures\n\nPartners"}
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__qR19L
        )}
      >
        {
          "Estate Planning\n\nFinancial Planning\n\nFudiciary Services\n\nProducts\n\nResources"
        }
      </div>

      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text___7Ubm1
        )}
      >
        {
          "Our Technology\n\nDocumentation\n\nPresentations\n\nTutorials\n\nVersion History"
        }
      </div>

      <Image5TracedIcon
        className={classNames(projectcss.all, sty.svg__b0AJ)}
        role={"img"}
      />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "rectangle21",
    "cwLogoSolidWhite1",
    "b",
    "c",
    "globallyIncubateStandardsCompliantChannelsBeforeScalableBenefitsQuicklyDisseminateSuperiorDeliverablesWhereasWebEnabledApplicationsQuicklyDriveClicksAndMortarCatalystsForChangeBeforeVerticalArchitecturesCrediblyReintermediateBackendIdeasForCrossPlatformModelsContinuallyReintermediateIntegratedProcessesThroughTechnicallySoundIntellectualCapital"
  ],
  rectangle21: ["rectangle21"],
  cwLogoSolidWhite1: ["cwLogoSolidWhite1", "b", "c"],
  b: ["b", "c"],
  c: ["c"],
  globallyIncubateStandardsCompliantChannelsBeforeScalableBenefitsQuicklyDisseminateSuperiorDeliverablesWhereasWebEnabledApplicationsQuicklyDriveClicksAndMortarCatalystsForChangeBeforeVerticalArchitecturesCrediblyReintermediateBackendIdeasForCrossPlatformModelsContinuallyReintermediateIntegratedProcessesThroughTechnicallySoundIntellectualCapital:
    [
      "globallyIncubateStandardsCompliantChannelsBeforeScalableBenefitsQuicklyDisseminateSuperiorDeliverablesWhereasWebEnabledApplicationsQuicklyDriveClicksAndMortarCatalystsForChangeBeforeVerticalArchitecturesCrediblyReintermediateBackendIdeasForCrossPlatformModelsContinuallyReintermediateIntegratedProcessesThroughTechnicallySoundIntellectualCapital"
    ]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  rectangle21: "div";
  cwLogoSolidWhite1: "div";
  b: "div";
  c: "div";
  globallyIncubateStandardsCompliantChannelsBeforeScalableBenefitsQuicklyDisseminateSuperiorDeliverablesWhereasWebEnabledApplicationsQuicklyDriveClicksAndMortarCatalystsForChangeBeforeVerticalArchitecturesCrediblyReintermediateBackendIdeasForCrossPlatformModelsContinuallyReintermediateIntegratedProcessesThroughTechnicallySoundIntellectualCapital: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCwFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCwFooter__VariantsArgs;
    args?: PlasmicCwFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCwFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCwFooter__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicCwFooter__ArgProps,
          internalVariantPropNames: PlasmicCwFooter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicCwFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCwFooter";
  } else {
    func.displayName = `PlasmicCwFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicCwFooter = Object.assign(
  // Top-level PlasmicCwFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    rectangle21: makeNodeComponent("rectangle21"),
    cwLogoSolidWhite1: makeNodeComponent("cwLogoSolidWhite1"),
    b: makeNodeComponent("b"),
    c: makeNodeComponent("c"),
    globallyIncubateStandardsCompliantChannelsBeforeScalableBenefitsQuicklyDisseminateSuperiorDeliverablesWhereasWebEnabledApplicationsQuicklyDriveClicksAndMortarCatalystsForChangeBeforeVerticalArchitecturesCrediblyReintermediateBackendIdeasForCrossPlatformModelsContinuallyReintermediateIntegratedProcessesThroughTechnicallySoundIntellectualCapital:
      makeNodeComponent(
        "globallyIncubateStandardsCompliantChannelsBeforeScalableBenefitsQuicklyDisseminateSuperiorDeliverablesWhereasWebEnabledApplicationsQuicklyDriveClicksAndMortarCatalystsForChangeBeforeVerticalArchitecturesCrediblyReintermediateBackendIdeasForCrossPlatformModelsContinuallyReintermediateIntegratedProcessesThroughTechnicallySoundIntellectualCapital"
      ),

    // Metadata about props expected for PlasmicCwFooter
    internalVariantProps: PlasmicCwFooter__VariantProps,
    internalArgProps: PlasmicCwFooter__ArgProps
  }
);

export default PlasmicCwFooter;
/* prettier-ignore-end */
