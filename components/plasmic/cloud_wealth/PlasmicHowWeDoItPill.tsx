// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7iST1GVY7MEDdpjnrPuCNJ
// Component: aPIlYqZD5m
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantshT8MqvJo0QuvrA } from "./PlasmicGlobalVariant__Desktop"; // plasmic-import: hT8MQVJo0quvrA/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cloud_wealth.module.css"; // plasmic-import: 7iST1GVY7MEDdpjnrPuCNJ/projectcss
import sty from "./PlasmicHowWeDoItPill.module.css"; // plasmic-import: aPIlYqZD5m/css

export type PlasmicHowWeDoItPill__VariantMembers = {};
export type PlasmicHowWeDoItPill__VariantsArgs = {};
type VariantPropType = keyof PlasmicHowWeDoItPill__VariantsArgs;
export const PlasmicHowWeDoItPill__VariantProps = new Array<VariantPropType>();

export type PlasmicHowWeDoItPill__ArgsType = {};
type ArgPropType = keyof PlasmicHowWeDoItPill__ArgsType;
export const PlasmicHowWeDoItPill__ArgProps = new Array<ArgPropType>();

export type PlasmicHowWeDoItPill__OverridesType = {
  root?: p.Flex<"div">;
  pill2?: p.Flex<"div">;
};

export interface DefaultHowWeDoItPillProps {
  className?: string;
}

function PlasmicHowWeDoItPill__RenderFunc(props: {
  variants: PlasmicHowWeDoItPill__VariantsArgs;
  args: PlasmicHowWeDoItPill__ArgsType;
  overrides: PlasmicHowWeDoItPill__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    desktop: useScreenVariantshT8MqvJo0QuvrA()
  });

  return (
    (hasVariant(globalVariants, "desktop", "mobileOnly") ? true : true) ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"pill2"}
          data-plasmic-override={overrides.pill2}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.pill2
          )}
        >
          {"how we do it"}
        </div>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "pill2"],
  pill2: ["pill2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  pill2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHowWeDoItPill__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHowWeDoItPill__VariantsArgs;
    args?: PlasmicHowWeDoItPill__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHowWeDoItPill__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHowWeDoItPill__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHowWeDoItPill__ArgProps,
          internalVariantPropNames: PlasmicHowWeDoItPill__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHowWeDoItPill__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHowWeDoItPill";
  } else {
    func.displayName = `PlasmicHowWeDoItPill.${nodeName}`;
  }
  return func;
}

export const PlasmicHowWeDoItPill = Object.assign(
  // Top-level PlasmicHowWeDoItPill renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    pill2: makeNodeComponent("pill2"),

    // Metadata about props expected for PlasmicHowWeDoItPill
    internalVariantProps: PlasmicHowWeDoItPill__VariantProps,
    internalArgProps: PlasmicHowWeDoItPill__ArgProps
  }
);

export default PlasmicHowWeDoItPill;
/* prettier-ignore-end */
