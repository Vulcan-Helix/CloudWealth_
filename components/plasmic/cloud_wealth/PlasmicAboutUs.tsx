// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7iST1GVY7MEDdpjnrPuCNJ
// Component: usnjWL1GOuiDvi
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: 9KxG1LQhTfZ-fr/component
import Button from "../../Button"; // plasmic-import: hpLAsCB6dkK5a/component
import Footer from "../../Footer"; // plasmic-import: JfbLrw7cZCfTIu/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_cloud_wealth.module.css"; // plasmic-import: 7iST1GVY7MEDdpjnrPuCNJ/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: usnjWL1GOuiDvi/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: LSNuBBNZXUjC6e/icon

export type PlasmicAboutUs__VariantMembers = {};
export type PlasmicAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutUs__VariantsArgs;
export const PlasmicAboutUs__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicAboutUs__ArgsType;
export const PlasmicAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutUs__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  freeBox?: p.Flex<"div">;
  figmaPaste?: p.Flex<"div">;
  gradient1?: p.Flex<"div">;
  layer2?: p.Flex<"div">;
  layer1?: p.Flex<"div">;
  rectangle?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  rectangle23?: p.Flex<"div">;
  frame6?: p.Flex<"div">;
  footer?: p.Flex<typeof Footer>;
  figmaPaste2?: p.Flex<"div">;
  pill?: p.Flex<"div">;
  pill2?: p.Flex<"div">;
  rectangle20?: p.Flex<"div">;
};

export interface DefaultAboutUsProps {}

function PlasmicAboutUs__RenderFunc(props: {
  variants: PlasmicAboutUs__VariantsArgs;
  args: PlasmicAboutUs__ArgsType;
  overrides: PlasmicAboutUs__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <div
              data-plasmic-name={"figmaPaste"}
              data-plasmic-override={overrides.figmaPaste}
              className={classNames(projectcss.all, sty.figmaPaste)}
            >
              <div
                data-plasmic-name={"gradient1"}
                data-plasmic-override={overrides.gradient1}
                className={classNames(projectcss.all, sty.gradient1)}
              >
                <div
                  data-plasmic-name={"layer2"}
                  data-plasmic-override={overrides.layer2}
                  className={classNames(projectcss.all, sty.layer2)}
                >
                  <div
                    data-plasmic-name={"layer1"}
                    data-plasmic-override={overrides.layer1}
                    className={classNames(projectcss.all, sty.layer1)}
                  >
                    <div
                      data-plasmic-name={"rectangle"}
                      data-plasmic-override={overrides.rectangle}
                      className={classNames(projectcss.all, sty.rectangle)}
                    />
                  </div>
                </div>
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xqo6N
                )}
              >
                {"Extensive Infomediaries\nvia Extensible Niches"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uDAc
                )}
              >
                {
                  "Quickly disseminate superior deliverables whereas web-enabled applications. Quickly drive clicks-and-mortar catalysts for change before vertical architectures."
                }
              </div>

              <Button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames("__wab_instance", sty.button)}
              />

              <div
                data-plasmic-name={"rectangle23"}
                data-plasmic-override={overrides.rectangle23}
                className={classNames(projectcss.all, sty.rectangle23)}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"frame6"}
                data-plasmic-override={overrides.frame6}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame6)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__sXoSb)}
                  displayHeight={"217px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"218px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/cloud_wealth/images/imagePlaceholder.svg",
                    fullWidth: 218,
                    fullHeight: 217,
                    aspectRatio: 1.009174
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__sMnjG)}
                  displayHeight={"217px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"219px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/cloud_wealth/images/imagePlaceholder2.svg",
                    fullWidth: 219,
                    fullHeight: 217,
                    aspectRatio: 1.013761
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__avUrq)}
                  displayHeight={"217px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"219px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/cloud_wealth/images/imagePlaceholder2.svg",
                    fullWidth: 219,
                    fullHeight: 217,
                    aspectRatio: 1.013761
                  }}
                />

                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__mWzn1)}
                  displayHeight={"217px" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"218px" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/cloud_wealth/images/imagePlaceholder.svg",
                    fullWidth: 218,
                    fullHeight: 217,
                    aspectRatio: 1.009174
                  }}
                />
              </p.Stack>
            </div>
          </div>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />

          <div
            data-plasmic-name={"figmaPaste2"}
            data-plasmic-override={overrides.figmaPaste2}
            className={classNames(projectcss.all, sty.figmaPaste2)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__g5UnA
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#000000" }}
                >
                  {"reintermediate backend ideas"}
                </span>
                <React.Fragment>
                  {
                    "\n\nSynergistically evolve 2.0 technologies rather than just in time initiatives. Quickly deploy strategic networks with compelling e-business. Credibly pontificate highly efficient manufactured products and enabled data.\n\nDynamically target high-payoff intellectual capital for customized technologies. Objectively integrate emerging core competencies before process-centric communities. Dramatically evisculate holistic innovation rather than client-centric data."
                  }
                </React.Fragment>
              </React.Fragment>
            </div>

            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__t0TWr)}
              displayHeight={"506px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"499px" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/cloud_wealth/images/imagePlaceholder3.svg",
                fullWidth: 499,
                fullHeight: 506,
                aspectRatio: 0.988166
              }}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"pill"}
              data-plasmic-override={overrides.pill}
              hasGap={true}
              className={classNames(projectcss.all, sty.pill)}
            >
              <div
                data-plasmic-name={"pill2"}
                data-plasmic-override={overrides.pill2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.pill2
                )}
              >
                {"how we do it"}
              </div>
            </p.Stack>

            <div
              data-plasmic-name={"rectangle20"}
              data-plasmic-override={overrides.rectangle20}
              className={classNames(projectcss.all, sty.rectangle20)}
            />
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "freeBox",
    "figmaPaste",
    "gradient1",
    "layer2",
    "layer1",
    "rectangle",
    "button",
    "rectangle23",
    "frame6",
    "footer",
    "figmaPaste2",
    "pill",
    "pill2",
    "rectangle20"
  ],
  header: ["header"],
  freeBox: [
    "freeBox",
    "figmaPaste",
    "gradient1",
    "layer2",
    "layer1",
    "rectangle",
    "button",
    "rectangle23",
    "frame6"
  ],
  figmaPaste: [
    "figmaPaste",
    "gradient1",
    "layer2",
    "layer1",
    "rectangle",
    "button",
    "rectangle23",
    "frame6"
  ],
  gradient1: ["gradient1", "layer2", "layer1", "rectangle"],
  layer2: ["layer2", "layer1", "rectangle"],
  layer1: ["layer1", "rectangle"],
  rectangle: ["rectangle"],
  button: ["button"],
  rectangle23: ["rectangle23"],
  frame6: ["frame6"],
  footer: ["footer"],
  figmaPaste2: ["figmaPaste2", "pill", "pill2", "rectangle20"],
  pill: ["pill", "pill2"],
  pill2: ["pill2"],
  rectangle20: ["rectangle20"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  freeBox: "div";
  figmaPaste: "div";
  gradient1: "div";
  layer2: "div";
  layer1: "div";
  rectangle: "div";
  button: typeof Button;
  rectangle23: "div";
  frame6: "div";
  footer: typeof Footer;
  figmaPaste2: "div";
  pill: "div";
  pill2: "div";
  rectangle20: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutUs__VariantsArgs;
    args?: PlasmicAboutUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAboutUs__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutUs__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    freeBox: makeNodeComponent("freeBox"),
    figmaPaste: makeNodeComponent("figmaPaste"),
    gradient1: makeNodeComponent("gradient1"),
    layer2: makeNodeComponent("layer2"),
    layer1: makeNodeComponent("layer1"),
    rectangle: makeNodeComponent("rectangle"),
    button: makeNodeComponent("button"),
    rectangle23: makeNodeComponent("rectangle23"),
    frame6: makeNodeComponent("frame6"),
    footer: makeNodeComponent("footer"),
    figmaPaste2: makeNodeComponent("figmaPaste2"),
    pill: makeNodeComponent("pill"),
    pill2: makeNodeComponent("pill2"),
    rectangle20: makeNodeComponent("rectangle20"),

    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
